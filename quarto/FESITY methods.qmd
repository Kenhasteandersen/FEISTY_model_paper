---
title: "FEISTY method figures"
format: html
fig-format: pdf
editor: visual
date: today
---

## Install FEISTY:

Download and install FEISTY package from GitHub. Devtools is required:

```{r}
#| warning: FALSE
if (!requireNamespace("devtools", quietly = TRUE)) {
  install.packages("devtools")
}

if (!requireNamespace("FEISTY", quietly = TRUE)) {
devtools::install_github("https://github.com/Kenhasteandersen/FEISTY/tree/R-Package")
}
```

## Prepare environment:

Clear environment:

```{r}
rm(list = ls())
```

Load packages:

```{r}
#| output: false
library(tidyverse)
library(ggthemes)
library(FEISTY)
library(scales)
library(mgcv)
library(patchwork)
library(png)
library(grid)
library(latex2exp)
library(rnaturalearth)
library(sf)
library(viridis)
```

Source extra figure functions:

```{r}
source("Extra_plotting_functions.R")
```

## Create figures:

### Figure 2:

Run and plot a simple model example:

```{r plot2, fig.width = 8.5, fig.height= 7}
parameters = setupVertical2()
sim = simulateFEISTY(p = parameters)
plot(sim)
```

### Figure 3:

Load data:

```{r}
load(file = "data/shelf_slope_ocean_example.Rdata")
```

Load functional group shapes:

```{r}
clam          <- readPNG("shapes/Benthic_invertebrate.png")
large_copepod <- readPNG("shapes/Large_MesoZoo.png")
small_copepod <- readPNG("shapes/Small_MesoZoo.png")
herring       <- readPNG("shapes/Small_Pel_herring.png")
cod           <- readPNG("shapes/Demersal.png")
tuna          <- readPNG("shapes/Large_Pelagic_Tuna.png")
mictophid     <- readPNG("shapes/Mesopelagic.png")
lanternfish   <- readPNG("shapes/Midwater_predator.png")
```

Generate simulations:

```{r}
# Simulate shelf:
my_sims <- shelf_slope_open_sim(df)

my_sims_biomass <- left_join(my_sims$Biomass, df, by = "id")

my_sims_biomass <- my_sims_biomass %>%
  mutate(depth2 = 3000 - depth)

# Pick specific examples:
examples <- c(19, 50, 90)
```

Create shelf to open ocean plot:

```{r}
#| warning: FALSE

# Upper trophic levels:
p_run   <- my_sims$sims[[1]]$p
Fishcol <- p_run$my_palette[attr(my_sims$sims[[1]]$p$my_palette, "names") 
                           %in% my_sims_biomass$funGroup]
Fishlbl <- p_run$my_names[attr(my_sims$sims[[1]]$p$my_palette, "names") 
                         %in% my_sims_biomass$funGroup]

p3a <- ggplot(data = my_sims_biomass) +
  geom_line(aes(x = id, y = (totBiomass), color = funGroup), 
            size = .7, alpha = .9) +
  scale_color_manual(values = Fishcol, labels = Fishlbl) +
  geom_area(aes(x = id, y = 1/1000 * depth2, alpha = 0), 
            fill = "burlywood4", alpha = 0.2) +
  geom_vline(xintercept = examples, alpha = .7, linetype = "dotted") +
  annotate("text", label = c("c", "d", "e"), x = examples + 2, y = 22, size = 4) +
  annotation_raster(herring, xmin = examples[[2]] + 10, xmax = examples[[2]] + 25, 
                    ymin = 20, 
                    ymax = 18, interpolate = T) +
  annotation_raster(tuna, xmin = examples[[2]] + 8, xmax = examples[[2]] + 28,  
                    ymin = 15, 
                    ymax = 18, interpolate = T) +
  annotation_raster(mictophid, xmin = examples[[2]] + 10, 
                    xmax = examples[[2]] + 25,  
                    ymin = 13, 
                    ymax = 15, interpolate = T) +
  annotation_raster(lanternfish, xmin = examples[[2]] + 8, 
                    xmax = examples[[2]] + 28,  
                    ymin = 11, 
                    ymax = 13, interpolate = T) +
  annotation_raster(cod, xmin = examples[[2]] + 8,  xmax = examples[[2]] + 28,  
                    ymin = 9, 
                    ymax = 11, interpolate = T) +
  ylab(expression(paste("Biomass (g ", m^-2,")"))) +
  theme_base() +
  theme(axis.title.x = element_blank(),
        axis.text.x = element_blank(),
        axis.ticks.x = element_blank(),
        axis.title.y = element_text(size = 12),
        axis.text.y = element_text(size = 8),
        legend.title = element_blank(),
        legend.text = element_text(size = 8),
        legend.position = "none", #c(.7, 0.65),
        legend.background = element_rect(fill = "transparent"),
        legend.key = element_rect(colour = NA, fill = NA)) +
  guides(color = guide_legend(ncol = 1))

# Resources:
df2 <- df %>% pivot_longer(cols = 3:5, names_to = "resource") %>%
  rename(productivity = value)

# Specify depth axis text:
xaxis <- c("Shelf", "Slope", "Open ocean")

Rescol <- p_run$my_palette[attr(my_sims$sims[[1]]$p$my_palette, "names") 
                           %in% df2$resource]
Reslbl <- p_run$my_names[attr(my_sims$sims[[1]]$p$my_palette, "names") 
                          %in% df2$resource]

p3b <- ggplot(data = df2) + 
  geom_line(aes(x = id, y = productivity, color = resource), 
            size = .7, alpha = .8) +
  scale_color_manual(values = Rescol, labels = Reslbl) +
  geom_vline(xintercept = examples, alpha = .7, linetype = "dotted") +
  annotation_raster(small_copepod, xmin = examples[[2]] + 18.2,  
                    xmax = examples[[2]] + 25.2,  
                    ymin = 76, 
                    ymax = 92, interpolate = T) +
  annotation_raster(large_copepod, xmin = examples[[2]] + 16,  
                    xmax = examples[[2]] + 27,  
                    ymin = 50, 
                    ymax = 75, interpolate = T) +
  annotation_raster(clam, xmin = examples[[2]] + 17.5,  
                    xmax = examples[[2]] + 25.5,  
                    ymin = 24, 
                    ymax = 46, interpolate = T) +
  
  scale_x_continuous(breaks = examples, labels = xaxis) +
  ylab(expression(paste("Resources (g ", m^-2," yr)")))  +
  theme_base() +
  theme(axis.title.x = element_blank(),
        axis.text.x = element_text(size = 8),
        axis.ticks.x = element_blank(),
        axis.text.y = element_text(size = 8),
        axis.title.y = element_text(size = 12),
        legend.title = element_blank(),
        legend.text = element_text(size = 8),
        legend.position = "none",
        legend.background = element_rect(fill = "transparent"),
        legend.key = element_rect(colour = NA, fill = NA)) +
  guides(color = guide_legend(nrow = 2))

```

Create network plots:

```{r}
# Select example simulations:
example_sims <- my_sims$sims[df[examples, ]$id]

p3c <- plotNetwork2(example_sims[[1]],scale_bio_manual = T,scale_bio = 50) +  
          theme(legend.position = "none")
p3d <- plotNetwork2(example_sims[[2]],scale_bio_manual = T,scale_bio = 50) +  
          theme(legend.position = "none")
p3e <- plotNetwork2(example_sims[[3]],scale_bio_manual = T,scale_bio = 50) +  
          theme(legend.position = "none")

```

Combine panels in a single plot:

```{r plot3, fig.width = 8, fig.height= 6}
#| warning: FALSE
# Layout plot:
layout <- "
AAC
AAD
BBE
"

p3a + p3b + p3c + p3d + p3e + plot_layout(design = layout)  &
     theme(plot.background = element_blank(), 
          plot.margin = margin(0, 1, 0, 1, "mm")) &
     plot_annotation(tag_levels = "a") &
     theme(plot.tag = element_text(size = 10))
```

### Figure 4:

Prepare output data for plotting:

```{r}

# Get output of FEISTY global run
load("data/Global_fish_biomass.RData")
out$tot <- rowSums(out[,3:7])
out$lon <- ifelse(out$lon > 179.5,out$lon-360,out$lon)
out_sf  <- st_as_sf(out, coords = c("lon","lat"),crs = 4326)

# Create grid
grid <- st_as_sf(out_sf %>% 
          st_make_grid(cellsize = 1, what = "polygons")) %>% 
          st_join(out_sf, join = st_intersects, left = TRUE)

# load world map
world <- ne_countries(scale = 10, returnclass = "sf")
```

Plot the map:

```{r plot4, fig.width = 3, fig.height= 3.5}
#| warning: FALSE
ggplot(grid) + 
  geom_sf(aes(fill=log10(tot+0.01)), colour = NA) + 
  scale_fill_viridis(name="Fish biomass g m-2    \n",
                     labels = c("<0.01","1","100"),breaks=c(-2,0,2))  + 
  geom_sf(data=world,col="grey",fill="grey") +
  coord_sf(crs= "+proj=moll") +
  theme(plot.background=element_blank(),
        panel.background=element_blank(),
        axis.text.y   = element_blank(),
        axis.text.x   = element_blank(),
        axis.ticks    = element_blank(),
        axis.title.y  = element_blank(),
        axis.title.x  = element_blank(),
        panel.border  = element_blank(),
        legend.position = "bottom",
        legend.title = element_text(size=8))
```

### Figure 5:

Setup sensitivity run:

```{r}

# From shelf, slope to open ocean
experiment <- seq(1, nrow(df), 1)

# Initialization
df_m <- matrix(ncol = 4 + 2, nrow = length(experiment))

# Stage number loop
i <- 1
for (idx in experiment){
  param1 <- setupBasic(szprod = df$smallZoo[idx],
                       lzprod = df$largeZoo[idx],
                       bprodin  = df$benthos[idx],
                       depth  = df$depth[idx]) 
  param2 <- setupBasic2(szprod = df$smallZoo[idx],
                       lzprod = df$largeZoo[idx],
                       bprodin  = df$benthos[idx],
                       depth  = df$depth[idx]) 
  param3 <- setupVertical(szprod = df$smallZoo[idx],
                       lzprod = df$largeZoo[idx],
                       bprodin = df$benthos[idx],
                       depth  = df$depth[idx]) 
  param4 <- setupVertical2(szprod = df$smallZoo[idx],
                       lzprod = df$largeZoo[idx],
                       bprodin = df$benthos[idx],
                       depth  = df$depth[idx])

  sim1 <- simulateFEISTY(p = param1)
  sim2 <- simulateFEISTY(p = param2)
  sim3 <- simulateFEISTY(p = param3)
  sim4 <- simulateFEISTY(p = param4)
  
  # get average biomass of last 40% of simulations
  id_st  <- round(0.6*nrow(sim1$totBiomass), digits = 0)
  id_end <- nrow(sim1$totBiomass)
  bmass1 <- sum(apply(sim1$totBiomass[id_st:id_end,], 2, mean))
  bmass2 <- sum(apply(sim2$totBiomass[id_st:id_end,], 2, mean))
  bmass3 <- sum(apply(sim3$totBiomass[id_st:id_end,], 2, mean))
  bmass4 <- sum(apply(sim4$totBiomass[id_st:id_end,], 2, mean))
  
  df_m[i, ] <- c(i, bmass1, bmass2, bmass3, bmass4, df$depth[idx])
  i <- i+1
}

# Massage into long format df
dimnames(df_m) <- list(NULL, c("id", "Basic", "Basic2", 
                               "Vertical", "Vertical2", "Depth"))
df_setup <- pivot_longer(as.data.frame(df_m), cols = !c(Depth, id))
```

Setup sensitivity plotting:

```{r}
p5 <- ggplot(transform(df_setup,
                      name = factor(name, 
                      levels = c("Basic", "Basic2", 
                        "Vertical", "Vertical2")))) +
  geom_line(aes(x=id, y=value, linetype = name)) +
  scale_y_continuous(name = expression("Biomass (g "*m^-2* ")" )) +
  scale_x_continuous(breaks = examples, labels = xaxis) +
  scale_linetype_manual(values = c("solid", "dotted", "longdash", "dotdash")) +
  theme_base() +
  theme(axis.text.x = element_text(size = 8),
        axis.title.x = element_blank(),
        axis.text.y = element_text(size = 8),
        axis.title.y = element_text(size = 8),
        legend.title = element_blank(),
        legend.text = element_text(size = 8),
        legend.position=c(0.75, 0.75),
        legend.background = element_rect(fill = "transparent"),
        legend.key = element_rect(colour = NA, fill = NA)) +
  guides(linetype = guide_legend(nrow = 4))
```

Plot:

```{r plot5, fig.width = 3.2, fig.height= 2.8}
#| warning: FALSE
# Layout plot:
layout <- "
A
"

p5 + plot_layout(design = layout)  &
   theme(plot.background = element_blank(), 
        plot.margin = margin(1, 1, 0, 1, "mm") ) &
   theme(plot.tag = element_text(size = 10))
```

### Figure S1:

Create setup comparison for 100m depth

```{r plotS1, fig.width = 7, fig.height= 5.9 }
p <- setupComparison(input_depth = 100)
```

### Figure S2:

Create setup comparison for 1500m depth

```{r plotS2, fig.width = 7, fig.height= 5.9 }
p <- setupComparison(input_depth = 1500)
```

### Figure S3:

Sensitivity analysis of stage numbers in setupBasic2 (x: Stage number y: Biomass)

```{r plotS3, fig.width = 7, fig.height= 5.9 }
analyseStagebiomass(vertical = F) # Setup basic2
```

### Figure S4:

Sensitivity analysis of stage numbers in setupVertical2 (x: Stage number y: Biomass)

```{r plotS4, fig.width = 7, fig.height= 5.9 }
analyseStagebiomass(vertical = T) # Setup vertical2
```

### Figure S5:

Define fishing loop function:

```{r}
simFishing <- function(param, group, F_list){
  bmass <- c()
  yield <- c()
  df_fishing <- data.frame()
  
  for (Fi in F_list){ # F loop
    q <- setFishing(param, Fmax = Fi, groupidx = group)
    sim <- simulateFEISTY(p = q)
    
    # get average of last 40%
    id_st  <- round(0.6*nrow(sim$totBiomass), digits = 0)
    id_end <- nrow(sim$totBiomass)
    bmass  <- c(bmass, mean(sim$totBiomass[id_st:id_end, group]))
    yield  <- c(yield, mean(sim$yield[id_st:id_end, group]))
  }
  
  df_fishing <- data.frame(Fmax = F_list,
                           Biomass = bmass / max(bmass),
                           Yield = yield / max(yield))

  return(df_fishing)
}
```

Fishing simulations:

```{r}
load(file = "data/shelf_slope_ocean_example.Rdata")
param <- setupVertical2(depth   = df[examples[1], "depth"],
                        szprod  = df[examples[1], "smallZoo"],
                        lzprod  = df[examples[1], "largeZoo"],
                        bprodin = df[examples[1], "benthos"])

df_fishing_smallPel <- simFishing(param, 1, seq(0, 6, 0.2))
df_fishing_largePel <- simFishing(param, 3, seq(0, 0.075, 0.0005))
df_fishing_demersal <- simFishing(param, 5, seq(0, 1.75, 0.01))
```

Plotting panels:

```{r}
p10a <- ggplot(df_fishing_smallPel) + 
  aes(x = Fmax) + 
  geom_line(aes(y=Biomass), color=param$my_palette[1+3],linetype=1) + #smallPel
  geom_line(aes(y=Yield), color=param$my_palette[1+3],linetype=2) + #smallPel
  scale_x_continuous(name = 
                     expression("Fishing mortality " *italic(F)*" ("*yr^-1 *")"),
                     breaks = c(min(df_fishing_smallPel$Fmax),
                                max(df_fishing_smallPel$Fmax))) +
  scale_y_continuous(name = "Relative to maximum",
                     breaks = c(0.0, 0.2, 0.4, 0.6, 0.8, 1.0)) +
  annotation_raster(herring,
                    xmin = 4.5, xmax = 6, 
                    ymin = 0.9, ymax = 1.0, interpolate = T) +
  theme_base() +
  theme(legend.position = "none",
        axis.text.x = element_text(size = 8),
        axis.title.x = element_blank(),
        axis.text.y = element_text(size = 8),
        axis.title.y = element_text(size = 8),
        legend.title = element_blank(),
        legend.background = element_rect(fill = "transparent"),
        legend.key = element_rect(colour = NA, fill = NA))

p10b <- ggplot(df_fishing_largePel) +
  aes(x = Fmax) +
  geom_line(aes(y=Biomass), color=param$my_palette[3+3], linetype=1) + #largePel
  geom_line(aes(y=Yield), color=param$my_palette[3+3], linetype  = 2) + #largePel
  scale_x_continuous(name = 
                     expression("Fishing mortality "*italic(F)*" ("*yr^-1 *")"),
                     breaks = c(min(df_fishing_largePel$Fmax), 
                                max(df_fishing_largePel$Fmax))) +
  annotation_raster(tuna,
                    xmin = 0.053, xmax = 0.075, 
                    ymin = 0.88, ymax = 1.0, interpolate = T) +
  theme_base() +
  theme(legend.position = "none",
        axis.text.x = element_text(size = 8),
        axis.title.x = element_text(size = 8),
        axis.text.y = element_blank(),
        axis.title.y = element_blank(),
        axis.ticks.y = element_blank(),
        legend.title = element_blank(),
        legend.background = element_rect(fill = "transparent"),
        legend.key = element_rect(colour = NA, fill = NA))

p10c <- ggplot(df_fishing_demersal) +
  aes(x = Fmax) +
  geom_line(aes(y=Biomass), color=param$my_palette[5+3], linetype=1) + #demersal
  geom_line(aes(y=Yield), color=param$my_palette[5+3], linetype  = 2) + #demersal
  scale_x_continuous(name = 
                     expression("Fishing mortality "*italic(F)*" ("*yr^-1 *")"),
                     breaks = c(min(df_fishing_demersal$Fmax), 
                                max(df_fishing_demersal$Fmax))) +
  annotation_raster(cod,
                    xmin = 1.25, xmax = 1.75, 
                    ymin = 0.9, ymax = 1.0, interpolate = T) +
  theme_base() +
  theme(legend.position = "none",
        axis.text.x = element_text(size = 8),
        axis.title.x = element_blank(),
        axis.text.y = element_blank(),
        axis.title.y = element_blank(),
        axis.ticks.y = element_blank(),
        legend.title = element_blank(),
        legend.background = element_rect(fill = "transparent"),
        legend.key = element_rect(colour = NA, fill = NA))
```

```{r plotS5, fig.width = 6.3, fig.height= 2.4 }
#| warning: FALSE
# Layout plot:
layout <- "
ABC
"

p10a + p10b + p10c + plot_layout(design = layout)  &
  theme(plot.background = element_blank(), 
        plot.margin = margin(0, 1, 0, 1, "mm") ) &
  plot_annotation(tag_levels = "a") &
  theme(plot.tag = element_text(size = 10))
```
