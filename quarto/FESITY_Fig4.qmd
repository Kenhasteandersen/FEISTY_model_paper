---
title: "FEISTY method figures"
format: html
editor: visual
date: today
---

## Install FEISTY:

Download and install FEISTY package from GitHub. Devtools is required:

```{r}
#| warning: FALSE
if (!requireNamespace("devtools", quietly = TRUE)) {
  install.packages("devtools")
}

if (!requireNamespace("FEISTY", quietly = TRUE)) {
devtools::install_github("https://github.com/Kenhasteandersen/FEISTY/tree/R-Package")
}
```

## Prepare environment:

Clear environment:

```{r}
rm(list = ls())
```

Load packages:

```{r}
#| output: false
library(tidyverse)
library(FEISTY)
library(foreach)
library(doParallel)
library(rnaturalearth)
library(sf)
library(viridis)
library(grid)
```

## Create figures:

### Figure 4:

Load global forcing data and world shape:

```{r}
#| warning: FALSE
load(file = "data/Input_global.Rdata")
world <- rnaturalearth::ne_countries(scale = 10, returnclass = "sf")
```

Create a function to run FEISTY in parallel:

```{r}
#| warning: FALSE
# Set cores:
cl <- makeCluster(detectCores() - 2) 
registerDoParallel(cl)

# Create function:
simulateFEISTY_parallel <- function(rowidx, glob) {
  sim = simulateFEISTY(
    p = setupVertical2(
      szprod = glob[rowidx, "szprod"],
      lzprod = glob[rowidx, "lzprod"],
      dfbot  = glob[rowidx, "dfbot"],
      photic = glob[rowidx, "photic"],
      depth  = glob[rowidx, "depth"],
      Tp     = glob[rowidx, "Tp"],
      Tm     = glob[rowidx, "Tm"],
      Tb     = glob[rowidx, "Tb"]), 
    tEnd = 300) # nb of years to simulate model run
  return(sim)
}
```

Run global model in parallel:

```{r}
#| warning: FALSE
# Create empty list
res         <- list()
all_results <- list()

# Run model:
all_results <- foreach(rowidx = 1:nrow(glob), .packages = c("FEISTY")) %dopar% {
  sim = simulateFEISTY_parallel(rowidx, glob)
  res$lon=glob[rowidx,"lon"]
  res$lat=glob[rowidx,"lat"]
  res$totBiomass=colMeans(sim$totBiomass[round(0.6*sim$nTime):sim$nTime,]) # last 40% simulate time
  return(res)
}

stopCluster(cl)

# Create a data frame
out <- t(data.frame(matrix(data=unlist(all_results),nrow=7)))
colnames(out) <- c("lon","lat","totB_smpel","totB_mesopel","totB_largepel","totB_bathypel", "totB_dem")
out <- as.data.frame(out)
```

Prepare output data for plotting:

```{r}
#| warning: FALSE
# Get output
out$tot <- rowSums(out[,3:7])
out$lon <- ifelse(out$lon > 179.5,out$lon-360,out$lon)
out_sf  <- st_as_sf(out, coords = c("lon","lat"),crs = 4326)

# Create grid
grid <- st_as_sf(out_sf %>% 
          st_make_grid(cellsize = 1, what = "polygons")) %>% 
          st_join(out_sf, join = st_intersects, left = TRUE)
```

Plot it out:

```{r}
#| warning: FALSE
p <- ggplot(grid) + 
  geom_sf( aes(fill=log10(tot+0.01)), colour = NA ) + 
  scale_fill_viridis(name="Fish biomass g m-2 /n  \n",
                     labels = c("<0.01","1","100"),breaks=c(-2,0,2))  + 
  geom_sf(data=world,col="#8c8c8c",fill="#f2f2f2") +
  coord_sf(crs= "+proj=moll") +
  theme(plot.background=element_blank(),
        panel.background=element_blank(),
        axis.text.y   =element_blank(),
        axis.text.x   =element_blank(),
        axis.ticks    = element_blank(),
        axis.title.y  =element_blank(),
        axis.title.x  =element_blank(),
        panel.border  = element_blank(),
        legend.position = "bottom",
        legend.title = element_text(size=8))

p
```

Export plot:

```{r}
#| warning: FALSE
ggsave("plots/plot4.pdf", p, height = 3.5 , width = 5)
```
